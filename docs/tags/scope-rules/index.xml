<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scope Rules on The Working R Programmer</title>
    <link>https://mailund.github.io/r-programmer-blog/tags/scope-rules/</link>
    <description>Recent content in Scope Rules on The Working R Programmer</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright &amp;copy; 2018 - Thomas Mailund</copyright>
    <lastBuildDate>Tue, 02 Oct 2018 09:13:01 +0200</lastBuildDate>
    
	<atom:link href="https://mailund.github.io/r-programmer-blog/tags/scope-rules/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Promises, their environments, and how we evaluate them</title>
      <link>https://mailund.github.io/r-programmer-blog/2018/10/02/promises-their-environments-and-how-we-evaluate-them/</link>
      <pubDate>Tue, 02 Oct 2018 09:13:01 +0200</pubDate>
      
      <guid>https://mailund.github.io/r-programmer-blog/2018/10/02/promises-their-environments-and-how-we-evaluate-them/</guid>
      <description>Have you ever wondered how functions are evaluated? How you can have arguments that would raise errors, but do not, or how default arguments can be expressions that depend on function arguments that you haven&amp;rsquo;t seen yet when you define a function?</description>
    </item>
    
    <item>
      <title>Environments and formulae</title>
      <link>https://mailund.github.io/r-programmer-blog/2018/09/27/environments-and-formulae/</link>
      <pubDate>Thu, 27 Sep 2018 04:41:19 +0200</pubDate>
      
      <guid>https://mailund.github.io/r-programmer-blog/2018/09/27/environments-and-formulae/</guid>
      <description>In my two previous posts on non-standard evaluation, Scoping rules and NSE and Overscoping and eval, I explained:
 How R finds the bindings of variables by looking through chains of environments.</description>
    </item>
    
    <item>
      <title>Scoping Rules and NSE</title>
      <link>https://mailund.github.io/r-programmer-blog/2018/09/20/scoping-rules-and-nse/</link>
      <pubDate>Thu, 20 Sep 2018 05:00:15 +0200</pubDate>
      
      <guid>https://mailund.github.io/r-programmer-blog/2018/09/20/scoping-rules-and-nse/</guid>
      <description>Earlier this week, I wrote some tweets about how you have to be careful about scopes when you do &amp;ldquo;non-standard evaluation&amp;rdquo;. I cover this in both Metaprogramming in R and Domain-Specific Languages in R, but this tweet</description>
    </item>
    
  </channel>
</rss>