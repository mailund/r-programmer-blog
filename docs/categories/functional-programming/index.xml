<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Functional Programming on The Working R Programmer</title>
    <link>https://mailund.github.io/r-programmer-blog/categories/functional-programming/</link>
    <description>Recent content in Functional Programming on The Working R Programmer</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright &amp;copy; 2018 - Thomas Mailund</copyright>
    <lastBuildDate>Thu, 18 Oct 2018 16:38:41 +0200</lastBuildDate>
    
	<atom:link href="https://mailund.github.io/r-programmer-blog/categories/functional-programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>The Cost of Pattern Matching</title>
      <link>https://mailund.github.io/r-programmer-blog/2018/10/18/the-cost-of-pattern-matching/</link>
      <pubDate>Thu, 18 Oct 2018 16:38:41 +0200</pubDate>
      
      <guid>https://mailund.github.io/r-programmer-blog/2018/10/18/the-cost-of-pattern-matching/</guid>
      <description>Following up on my previous post, where I figured out to improve the speed of constructors, I will have a look at pattern matching in this post.
I haven&amp;rsquo;t added any of this to pmatch yet.</description>
    </item>
    
    <item>
      <title>The Cost of Constructors</title>
      <link>https://mailund.github.io/r-programmer-blog/2018/10/16/the-cost-of-constructors/</link>
      <pubDate>Tue, 16 Oct 2018 18:09:55 +0200</pubDate>
      
      <guid>https://mailund.github.io/r-programmer-blog/2018/10/16/the-cost-of-constructors/</guid>
      <description>So, err, I wanted to compare the performance of linked lists versus R vectors on a case where the former is expected to perform better than the second: building a sequence one element at a time.</description>
    </item>
    
    <item>
      <title>Thunks and Trampolines</title>
      <link>https://mailund.github.io/r-programmer-blog/2018/10/10/thunks-and-trampolines/</link>
      <pubDate>Wed, 10 Oct 2018 15:38:25 +0200</pubDate>
      
      <guid>https://mailund.github.io/r-programmer-blog/2018/10/10/thunks-and-trampolines/</guid>
      <description>Have you ever written a recursive function that you couldn&amp;rsquo;t use because you ran out of stack space when you applied it to large data sizes? Then thunks and trampolines might be for you.</description>
    </item>
    
  </channel>
</rss>